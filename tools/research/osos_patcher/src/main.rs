struct Patcher {
    data: Vec<u8>
}

impl Patcher {
    fn new(b: &[u8]) -> Self {
        Self {
            data: b.to_vec(),
        }
    }

    fn patch(&mut self, orig: &[u8], new: &[u8]) {
        println!("Patching {orig:X?} with {new:X?}"); 
        // Must be same length
        assert_eq!(orig.len(), new.len()); 
        
        // Find start of original data
        let start = self.data.windows(orig.len()).position(|window| window == orig).unwrap(); 

        // Copy the data over original data
        self.data[start..(start+orig.len())].copy_from_slice(new);

        // Make sure the original is gone now, if its still here then the pattern is too generic
        assert!(self.data.windows(orig.len()).position(|window| window == orig).is_none()); 

    }
}

fn main() {
    let file = include_bytes!("../osos.fw.decrypted");
    let mut p = Patcher::new(file);

    p.patch(
        &[ 0x0b, 0xb0, 0xf0, 0xbd, 0x60, 0x68, 0x04, 0x9b, 0x02, 0x99, 0x00, 0x22],
        &[
            0x01, 0x4f, /*ldr r7, [pc, #4]*/
            0xb8, 0x47, /* blx r7 */
            0x0b, 0xb0, 0xf0, 0xbd,

            //082e22b4
        0xb4, 0x22, 0x2e, 0x08,
        ]
    );

    let orig = &[ 0xf7, 0xb5, 0xa2, 0xb0, 0x04, 0x46, 0x00, 0x20, 0xc0, 0x43, 0x21, 0x90, 0xa0, 0x69, 0x01, 0x22, 0x20, 0x90, 0x00, 0x20, 0x1f, 0x90, 0x1e, 0x90, 0x1d, 0x90, 0x20, 0x69, 0xe6, 0x68 ];
    let start = p.data.windows(orig.len()).position(|window| window == orig).unwrap();
    let rep = std::fs::read("/home/cub3d/projects/ipod/ramdump_patching/patch_payload/out").unwrap();
    let dat = &mut p.data[start..][..rep.len()];
    dat.copy_from_slice(&rep);

/* test rust patching
    //08310b30 in patcgbin
    p.patch(
        &[ 0xf7, 0xb5, 0xa2, 0xb0, 0x04, 0x46, 0x00, 0x20, 0xc0, 0x43, 0x21, 0x90, 0xa0, 0x69, 0x01, 0x22, 0x20, 0x90, 0x00, 0x20, 0x1f, 0x90, 0x1e, 0x90, 0x1d, 0x90, 0x20, 0x69, 0xe6, 0x68 ],
        &[
            0xfe, 0xff, 0xff, 0xea,

            0, 0, 0xa0, 0xe3,
            0x1e, 0xff, 0x2f, 0xe1,
            0x1e, 0xff, 0x2f, 0xe1,
            // 0x1e, 0xff, 0x2f, 0xe1,
            0x1e, 0xff, 0x2f, 0xe1,
            0x1e, 0xff, 0x2f, 0xe1,
            0x1e, 0xff, 0x2f, 0xe1,
            0, 0
        ]
    );*/

    /*

    // Change print string to print as hex
    p.patch(b"\t%d%% in DMIA\n", b"\t%x\n\0\0\0\0\0\0\0\0\0\0");

    // Replace playing music with loop prefix + nops
    p.patch(
        &[0xe1, 0x69, 0x20, 0x6a, 0x42, 0x1a, 0x28, 0xa1, 0x01, 0xa8, 0xb7, 0xf0, 0xec, 0xfb, 0x01, 0xa8, 0xb1, 0xf0, 0xbb, 0xfa, 0x02, 0x46, 0x04, 0x99, 0x20, 0x46, 0x02, 0xf1, 0x62, 0xfd,  0x3a, 0x46, 0x2b, 0xa1, 0x01, 0xa8, 0xb7, 0xf0, 0xdf, 0xfb, 0x01, 0xa8, 0xb1, 0xf0, 0xae, 0xfa, 0x02, 0x46, 0x04, 0x99, 0x20, 0x46, 0x02, 0xf1, 0x55, 0xfd],
        &[

            0x4f, 0xf0, 0x00, 0x05,  /* mov r5, 0 */
            0x4f, 0xf0, 0x00, 0x07, /* mov r7, 0x0 */
            0xfc, 0x37, /* adds r7, 0xfc */
            0x3f, 0x44, /* add r7, r7 */
            0x3f, 0x44, /* add r7, r7 */
            0x3f, 0x44, /* add r7, r7 */
            0x3f, 0x44, /* add r7, r7 */
            0x3f, 0x44, /* add r7, r7 */
            0x3f, 0x44, /* add r7, r7 */
            0x3f, 0x44, /* add r7, r7 */
            0x3f, 0x44, /* add r7, r7 */
            0x3f, 0x44, /* add r7, r7 */

            0xc0, 0x46,
            0xc0, 0x46,
            0xc0, 0x46,
            0xc0, 0x46,
            0xc0, 0x46,
            0xc0, 0x46,
            0xc0, 0x46,

            
            /* DO NOT MOVE THIS, THE ADDRESS IS RIPREL */
            /* should be placed @ 0810d4c2 */
            /* This loads the start addr from the memory that was used to store the "Total log length percentage string" */
            0x1f, 0xa7, /* adr r7, 0x6c*/
            0x3d, 0x68, /* mov r5, [r7]*/
            0xc0, 0x46,

            /* DO NOT MOVE THIS, THE ADDRESS IS RIPREL */
            /* should be placed @ 0810d4c8 */
            /* This loads the count from the memory that was used to store the "Playing music percentage string" */
            /* ldr r7, [<disk activity needed str>]*/
            0x27, 0xa7,

            0x3f, 0x68, /* mov r7, [r7]*/
            
            /* nops*/
            0x00, 0x46, /* becomes mov r2, r5 */
            0x00, 0x46, /* becomes nop */ 
        ]
    );

    //let heap_struct = 0x086cfb9c;
    let start_addr: u32 = 0x086cf000;
    let end_addr: u32 = start_addr + (0x100000 - 0xfc);

    //let end_addr: u32   = 0x22000000 + 0x100100;
    //let start_addr: u32 = 0x22000000 + 0xfc;

    // Replace the log legnth string with the start address for dumping
    let start_addr = start_addr.to_le_bytes();
    p.patch(b"\tTotal log length is ", &[start_addr[0],start_addr[1],start_addr[2],start_addr[3], 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);
    

    // Replace the playing music string with the count of bytes to dump
    let end_addr = end_addr.to_le_bytes();
    p.patch(b"\t%d%% Playing Music\n", &[end_addr[0], end_addr[1], end_addr[2], end_addr[3], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    
    // Replace sleep state with loop counter inc + check, branch 
    p.patch(
            &[ 0x2a, 0x46, 0x28, 0xa1, 0x01, 0xa8, 0xb7, 0xf0, 0xc5, 0xfb, 0x01, 0xa8, 0xb1, 0xf0, 0x94, 0xfa, 0x02, 0x46, 0x04, 0x99, 0x20, 0x46, 0x02, 0xf1, 0x3b, 0xfd ],
            &[ 
                0xc0, 0x46, /* nop */

                0x04, 0x35, /* adds r5, 4 */
                //0xb5, 0x42, /* cmp r5, r6 */

                0xc0, 0x46, /* nop */
                0xc0, 0x46, /* nop */
                0xc0, 0x46, /* nop */
                0xc0, 0x46, /* nop */
                //0x4f, 0xf0, 0x10, 0x07, /* mov r7, 0x10 */
                //0x10, 0x2d, /* cmp r5, 0x10 */
                0xbd, 0x42, /* cmp r5, r7 */

                0xe8, 0xd1, /* bne lbl (start of dmia print) */

                /* nops*/
                0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46 ]
    );

    // Remove the idle print
    p.patch(
        &[0x64, 0x20, 0xc1, 0x1b, 0x00, 0x98, 0x09, 0x1a, 0x4a, 0x1b, 0x23, 0xa1, 0x01, 0xa8, 0xb7, 0xf0, 0xb4, 0xfb, 0x01, 0xa8, 0xb1, 0xf0, 0x83, 0xfa, 0x02, 0x46, 0x04, 0x99, 0x20, 0x46, 0x02, 0xf1, 0x2a, 0xfd],

        &[0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46],
    );

    // Change dmia print to use *(r5 + offset) as value to log
    p.patch(
        &[ 0x3f, 0x68, 0x00, 0x46, 0x00, 0x46, 0x00, 0x9a],
        &[ 0x3f, 0x68, 
            0x2a, 0x46,  /* mov r2, r5 */
          //  0xff, 0x32, /* adds r2, 0xff */
            0xc0, 0x46, /* nop */
            0x12, 0x68 /* ldr r2, [r2] */
        ],
   );*/

    //2210dd30

    std::fs::write("./patched.bin", p.data).unwrap();
}


//TODO later:
// check the riprel address in ghidra
// Load the starting val for r5 from the ram
// Remove the adds
// Test
